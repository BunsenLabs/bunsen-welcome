#!/bin/bash
# Post installation script

set -o nounset # do not accept unset variables

HELP='    bl-welcome an interactive system configuration script

Options:
    -h --help   show this message

If bl-welcome is called in a terminal with no options (the usual method),
it will start an interactive process whereby the user can
adjust system configurations and install packages.
'

grep -q '\<boot=live\>' /proc/cmdline && { echo "$0: This script is not meant to be run in a live session." >&2; exit 0;}

# Contents of these arrays will be executed at the "deferred-actions" page.
pkgs_to_install=()
pkgs_to_install_norecs=()
pkgs_to_remove=()
pre_functions_to_execute=() # executed before package installs
post_functions_to_execute=() # executed after package installs

restart=false

for i in "$@"
do
    case "$i" in
    -h|--help)
        echo "$HELP"
        exit 0
        ;;
    --firstrun)
        [[ -e $HOME/.config/bunsen/bl-welcome ]] && exit 0
        ;;
    --restart)
        restart=true
        ;;
    '')
        ;;
    *)
        echo "${i}: no such option" >&2
        exit 1
        ;;
    esac
done

TEXTDOMAIN=bl-welcome # might be used in future for translations

BL_COMMON_LIBDIR='/usr/lib/bunsen/common'
BL_WELCOME_LIBDIR='/usr/lib/bunsen/welcome'
#BL_COMMON_LIBDIR='./'
#BL_WELCOME_LIBDIR='./welcome'

if ! . "$BL_COMMON_LIBDIR/bl-includes" 2> /dev/null; then
    echo $"Error: Failed to source bl-includes in $BL_COMMON_LIBDIR" >&2
    exit 1
fi

# Debian release that this BunsenLabs system is based on
debian_base=buster

# default url for added Debian backports etc.
default_mirror='https://deb.debian.org/debian'

# url for added BunsenLabs backports
bunsen_mirror='https://pkg.bunsenlabs.org/debian'

# matches most mirrors
# add (?=.*debian) at beginning to insist on 'debian' somewhere (needs PCRE)
mirror_regex='https?://([[:alnum:]_-]+\.)+[[:alnum:]]+(/[[:alnum:]._-]+)*/?'

# matches BunsenLabs url, http or https
bunsen_regex='https?://pkg.bunsenlabs.org/debian'

# pages (in BL_WELCOME_LIBDIR) that bl-welcome will run through
STEPS_FIRST=('intro' 'warning' 'apt-update-upgrade')
STEPS_UNDERSTOOD=('intro' 'apt-update-upgrade')
STEPS_RESTART=('restart')
STEPS_BASIC=('system-tweaks' 'install-images-extra' 'add-debian-backports' 'add-bunsen-backports' 'install-bluetooth' 'install-java-packages' 'install-flashplugin' 'install-dropbox' 'devel')
STEPS_DEVEL=('devel-install-version-control-tools' 'devel-install-lamp-stack' 'devel-install-packaging-tools')

log_dir="$HOME/.cache/bunsen-welcome"
mkdir -p "$log_dir"
logfile="$log_dir"/bl-welcome.log

####### functions #######

log() {
    echo "
${1-}
" >> "$logfile"
}

warnlog() {
    echo "######## WARNING ########
${1-}
------------------------------------------------" >> "$logfile"
}

sourcePage() {
    if [[ ! -r "$BL_WELCOME_LIBDIR/$1" ]]; then
        echo $"Error: Unable to read $1 in $BL_WELCOME_LIBDIR" >&2
        exit 1
    fi
    . "$BL_WELCOME_LIBDIR/$1"
}

# prints something like: -------[ page 1 of 10 ]-------
header() {
    local width=$(tput cols 2>/dev/tty)
    local headerLength=$((width - 8)) # 8 is for '[  ]' and 2 spaces margins
    local headerText=$(printf $"page %d of %d" "$STEP" "$STEPS")
    local dashesStart=$( printf "%$(( (headerLength - ${#headerText}) / 2 ))s" )
    local dashesEnd=$( printf "%$(( (headerLength - ${#headerText}) / 2 + (headerLength - ${#headerText}) % 2 ))s" )
    echo "  ${dashesStart// /-}[ ${headerText} ]${dashesEnd// /-}"$'\n'
}

# Usage: setupPage title text [prompt [prompt-extra-arg]]
# Omit prompt for noninteractive page.
setupPage() {
    sleep 1
    tput clear
    header
    say "${1^^}
${1//?/-}

$2
"
    [[ ${3-} ]] || { sleep 1;return 0;}
    prompt "  $3" "${4:-}"
    return $?
}

# trigger* functions prepare lists for actions at the "deferred-actions" step.

# This is the easiest function to use for a page installing one package.
# Usage: triggerInstallPage title text package...
# example: triggerInstallPage 'LibreOffice suite' 'This will install libreoffice' 'libreoffice'
# Returns 0 if package added to install list,
# 2 if package(s) already installed or install declined,
# 1 if there was an error.
triggerInstallPage() {
    local title=$"install"" $1"
    local text="$1 has already been installed."
    allInstalled "${@:3}" && {
        setupPage "$title" "$text"
        return 2
    }
    text="$2"$'\n\n'$"If you choose to do this, the following packages will be installed:""

    ${*:3}

"$"Note: additional packages listed as dependencies will also be installed."

    local prompt=$"Would you like to install"" ${1}?"

    if setupPage "$title" "$text" "$prompt" 'N'
    then
        if triggerInstall "${@:3}"
        then
            return 0
        else
            say '...going to next page.' 1
        fi
    else
        return 2
    fi
    return 1
}

# usage: triggerInstall [--apt-get-option] <package> [<packages>]
triggerInstall() {
    local norecs=false
    case ${1-} in
    --no-install-recommends)
        norecs=true
        shift
        ;;
    -*)
        echo "${1}: this apt option is not supported by triggerInstall()" >&2
        return 1
        ;;
    '')
        echo "No package has been sent to triggerInstall()" >&2
        return 1
        ;;
    esac
    if [[ $norecs = true ]]
    then
        pkgs_to_install_norecs+=("$@")
    else
        pkgs_to_install+=("$@")
    fi
    say "$* has been added to the install list for execution later." 2
}

# usage: triggerRemove <package> [<packages>]
triggerRemove() {
    [[ -n ${1-} ]] || { echo "No package has been sent to triggerRemove()" >&2; return 1;}
    pkgs_to_remove+=("$@")
    say "$* has been added to the removal list for execution later." 2
}

# usage: triggerRunPreFunction <function> [<functions>]
triggerRunPreFunction(){
    [[ -n ${1-} ]] || { echo "No function passed to triggerRunPreFunction()" >&2; return 1;}
    pre_functions_to_execute+=("$@")
    say "function(s) $* will be run later, before installing packages." 2
}

# usage: triggerRunPostFunction <function> [<functions>]
triggerRunPostFunction(){
    [[ -n ${1-} ]] || { echo "No function passed to triggerRunPostFunction()" >&2; return 1;}
    post_functions_to_execute+=("$@")
    say "function(s) $* will be run later, after installing packages." 2
}

# Usage: promptTriggerInstall name description [--apt-get-option] package [package...]
# To have some defined function - functionname - run first, use:
# promptTriggerInstall --setup functionname name desc...
# This function is only needed in cases when triggerInstallPage is inappropriate.
promptTriggerInstall() {
    local setupFunction=
    if [[ $1 = '--setup' ]]; then
        if [[ -n ${2-} && $(type -t "$2") = 'function'  ]]; then
            setupFunction="$2"
            shift 2
        else
            say "Error: ${2-} is not a function."
            return 1
        fi
    fi

    tput clear
    local title="INSTALL ${1^^}"
    say "
$title
${title//?/-}

$2
"

    prompt '  Add to the install list?' || return 1

    if [[ -n $setupFunction ]]; then
        triggerRunPreFunction "$setupFunction" || return 1 # run setup function later, if it exists
    fi

    triggerInstall "${@:3}" || return 1
}

# Returns 0 if a line in 'apt-cache policy' contains all the terms provided.
# Terms can be in any order, quote terms containing spaces.
# eg: checkSources c=main 'l=Debian Backports'
checkSources() {
    local re=
    for term in "$@"
    do
        re+="(?=.*$term(,|\s*$))"
    done
    apt-cache policy | grep -Pq "$re" && return 0
    return 1
}

# wrapper function in case future scripts want to do the test differently
usingDebStable() {
    checkSources "n=$debian_base" l=Debian c=main && return 0
    return 1
}

####### end functions #######

if [[ $restart = true ]]
then
    log "Restarting bl-welcome for $USER at $(date)"
else
    terminalCheck -T 'WELCOME!'
    exec > >( tee -ia "$logfile" ) 2>&1
    log "Starting bl-welcome for $USER at $(date)"
fi

if [[ $( id -u ) -eq 0 ]]; then
    echo $"Error: This script should not be run directly by root." >&2
    exit 1
fi

usingDebStable || {
    echo "Error: This script should be run only on Debian ${debian_base^}." >&2
    exit 1
}

createFlag 'bl-welcome'

if [[ $restart = true ]]; then
    STEPS_BASIC=("${STEPS_RESTART[@]}" "${STEPS_BASIC[@]}")
elif [[ -e $HOME/.config/bunsen/bl-welcome-understood ]]; then
    STEPS_BASIC=("${STEPS_UNDERSTOOD[@]}" "${STEPS_BASIC[@]}")
else
    STEPS_BASIC=("${STEPS_FIRST[@]}" "${STEPS_BASIC[@]}")
fi

(( STEPS = ${#STEPS_BASIC[@]} + ${#STEPS_DEVEL[@]} + 2 )) # +2 is for deferred-actions and fini

# Run through steps
STEP=1

DEVEL=false

for curStep in "${STEPS_BASIC[@]}"; do
    sourcePage "$curStep"
    ((STEP++))
done

if $DEVEL; then
    for curStep in "${STEPS_DEVEL[@]}"; do
        sourcePage "$curStep"
        ((STEP++))
    done
fi

sourcePage deferred-actions
STEP=$STEPS
sourcePage fini

exit 0
